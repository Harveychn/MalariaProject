package com.generator.pojo;

import java.util.ArrayList;
import java.util.List;

public class InputDiseaseExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    public InputDiseaseExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andCardidIsNull() {
            addCriterion("cardID is null");
            return (Criteria) this;
        }

        public Criteria andCardidIsNotNull() {
            addCriterion("cardID is not null");
            return (Criteria) this;
        }

        public Criteria andCardidEqualTo(Integer value) {
            addCriterion("cardID =", value, "cardid");
            return (Criteria) this;
        }

        public Criteria andCardidNotEqualTo(Integer value) {
            addCriterion("cardID <>", value, "cardid");
            return (Criteria) this;
        }

        public Criteria andCardidGreaterThan(Integer value) {
            addCriterion("cardID >", value, "cardid");
            return (Criteria) this;
        }

        public Criteria andCardidGreaterThanOrEqualTo(Integer value) {
            addCriterion("cardID >=", value, "cardid");
            return (Criteria) this;
        }

        public Criteria andCardidLessThan(Integer value) {
            addCriterion("cardID <", value, "cardid");
            return (Criteria) this;
        }

        public Criteria andCardidLessThanOrEqualTo(Integer value) {
            addCriterion("cardID <=", value, "cardid");
            return (Criteria) this;
        }

        public Criteria andCardidIn(List<Integer> values) {
            addCriterion("cardID in", values, "cardid");
            return (Criteria) this;
        }

        public Criteria andCardidNotIn(List<Integer> values) {
            addCriterion("cardID not in", values, "cardid");
            return (Criteria) this;
        }

        public Criteria andCardidBetween(Integer value1, Integer value2) {
            addCriterion("cardID between", value1, value2, "cardid");
            return (Criteria) this;
        }

        public Criteria andCardidNotBetween(Integer value1, Integer value2) {
            addCriterion("cardID not between", value1, value2, "cardid");
            return (Criteria) this;
        }

        public Criteria andWhetherinputcasesIsNull() {
            addCriterion("whetherInputCases is null");
            return (Criteria) this;
        }

        public Criteria andWhetherinputcasesIsNotNull() {
            addCriterion("whetherInputCases is not null");
            return (Criteria) this;
        }

        public Criteria andWhetherinputcasesEqualTo(Integer value) {
            addCriterion("whetherInputCases =", value, "whetherinputcases");
            return (Criteria) this;
        }

        public Criteria andWhetherinputcasesNotEqualTo(Integer value) {
            addCriterion("whetherInputCases <>", value, "whetherinputcases");
            return (Criteria) this;
        }

        public Criteria andWhetherinputcasesGreaterThan(Integer value) {
            addCriterion("whetherInputCases >", value, "whetherinputcases");
            return (Criteria) this;
        }

        public Criteria andWhetherinputcasesGreaterThanOrEqualTo(Integer value) {
            addCriterion("whetherInputCases >=", value, "whetherinputcases");
            return (Criteria) this;
        }

        public Criteria andWhetherinputcasesLessThan(Integer value) {
            addCriterion("whetherInputCases <", value, "whetherinputcases");
            return (Criteria) this;
        }

        public Criteria andWhetherinputcasesLessThanOrEqualTo(Integer value) {
            addCriterion("whetherInputCases <=", value, "whetherinputcases");
            return (Criteria) this;
        }

        public Criteria andWhetherinputcasesIn(List<Integer> values) {
            addCriterion("whetherInputCases in", values, "whetherinputcases");
            return (Criteria) this;
        }

        public Criteria andWhetherinputcasesNotIn(List<Integer> values) {
            addCriterion("whetherInputCases not in", values, "whetherinputcases");
            return (Criteria) this;
        }

        public Criteria andWhetherinputcasesBetween(Integer value1, Integer value2) {
            addCriterion("whetherInputCases between", value1, value2, "whetherinputcases");
            return (Criteria) this;
        }

        public Criteria andWhetherinputcasesNotBetween(Integer value1, Integer value2) {
            addCriterion("whetherInputCases not between", value1, value2, "whetherinputcases");
            return (Criteria) this;
        }

        public Criteria andDateonsetIsNull() {
            addCriterion("dateOnSet is null");
            return (Criteria) this;
        }

        public Criteria andDateonsetIsNotNull() {
            addCriterion("dateOnSet is not null");
            return (Criteria) this;
        }

        public Criteria andDateonsetEqualTo(Integer value) {
            addCriterion("dateOnSet =", value, "dateonset");
            return (Criteria) this;
        }

        public Criteria andDateonsetNotEqualTo(Integer value) {
            addCriterion("dateOnSet <>", value, "dateonset");
            return (Criteria) this;
        }

        public Criteria andDateonsetGreaterThan(Integer value) {
            addCriterion("dateOnSet >", value, "dateonset");
            return (Criteria) this;
        }

        public Criteria andDateonsetGreaterThanOrEqualTo(Integer value) {
            addCriterion("dateOnSet >=", value, "dateonset");
            return (Criteria) this;
        }

        public Criteria andDateonsetLessThan(Integer value) {
            addCriterion("dateOnSet <", value, "dateonset");
            return (Criteria) this;
        }

        public Criteria andDateonsetLessThanOrEqualTo(Integer value) {
            addCriterion("dateOnSet <=", value, "dateonset");
            return (Criteria) this;
        }

        public Criteria andDateonsetIn(List<Integer> values) {
            addCriterion("dateOnSet in", values, "dateonset");
            return (Criteria) this;
        }

        public Criteria andDateonsetNotIn(List<Integer> values) {
            addCriterion("dateOnSet not in", values, "dateonset");
            return (Criteria) this;
        }

        public Criteria andDateonsetBetween(Integer value1, Integer value2) {
            addCriterion("dateOnSet between", value1, value2, "dateonset");
            return (Criteria) this;
        }

        public Criteria andDateonsetNotBetween(Integer value1, Integer value2) {
            addCriterion("dateOnSet not between", value1, value2, "dateonset");
            return (Criteria) this;
        }

        public Criteria andFirstdayIsNull() {
            addCriterion("firstDay is null");
            return (Criteria) this;
        }

        public Criteria andFirstdayIsNotNull() {
            addCriterion("firstDay is not null");
            return (Criteria) this;
        }

        public Criteria andFirstdayEqualTo(Integer value) {
            addCriterion("firstDay =", value, "firstday");
            return (Criteria) this;
        }

        public Criteria andFirstdayNotEqualTo(Integer value) {
            addCriterion("firstDay <>", value, "firstday");
            return (Criteria) this;
        }

        public Criteria andFirstdayGreaterThan(Integer value) {
            addCriterion("firstDay >", value, "firstday");
            return (Criteria) this;
        }

        public Criteria andFirstdayGreaterThanOrEqualTo(Integer value) {
            addCriterion("firstDay >=", value, "firstday");
            return (Criteria) this;
        }

        public Criteria andFirstdayLessThan(Integer value) {
            addCriterion("firstDay <", value, "firstday");
            return (Criteria) this;
        }

        public Criteria andFirstdayLessThanOrEqualTo(Integer value) {
            addCriterion("firstDay <=", value, "firstday");
            return (Criteria) this;
        }

        public Criteria andFirstdayIn(List<Integer> values) {
            addCriterion("firstDay in", values, "firstday");
            return (Criteria) this;
        }

        public Criteria andFirstdayNotIn(List<Integer> values) {
            addCriterion("firstDay not in", values, "firstday");
            return (Criteria) this;
        }

        public Criteria andFirstdayBetween(Integer value1, Integer value2) {
            addCriterion("firstDay between", value1, value2, "firstday");
            return (Criteria) this;
        }

        public Criteria andFirstdayNotBetween(Integer value1, Integer value2) {
            addCriterion("firstDay not between", value1, value2, "firstday");
            return (Criteria) this;
        }

        public Criteria andNdayIsNull() {
            addCriterion("nDay is null");
            return (Criteria) this;
        }

        public Criteria andNdayIsNotNull() {
            addCriterion("nDay is not null");
            return (Criteria) this;
        }

        public Criteria andNdayEqualTo(Integer value) {
            addCriterion("nDay =", value, "nday");
            return (Criteria) this;
        }

        public Criteria andNdayNotEqualTo(Integer value) {
            addCriterion("nDay <>", value, "nday");
            return (Criteria) this;
        }

        public Criteria andNdayGreaterThan(Integer value) {
            addCriterion("nDay >", value, "nday");
            return (Criteria) this;
        }

        public Criteria andNdayGreaterThanOrEqualTo(Integer value) {
            addCriterion("nDay >=", value, "nday");
            return (Criteria) this;
        }

        public Criteria andNdayLessThan(Integer value) {
            addCriterion("nDay <", value, "nday");
            return (Criteria) this;
        }

        public Criteria andNdayLessThanOrEqualTo(Integer value) {
            addCriterion("nDay <=", value, "nday");
            return (Criteria) this;
        }

        public Criteria andNdayIn(List<Integer> values) {
            addCriterion("nDay in", values, "nday");
            return (Criteria) this;
        }

        public Criteria andNdayNotIn(List<Integer> values) {
            addCriterion("nDay not in", values, "nday");
            return (Criteria) this;
        }

        public Criteria andNdayBetween(Integer value1, Integer value2) {
            addCriterion("nDay between", value1, value2, "nday");
            return (Criteria) this;
        }

        public Criteria andNdayNotBetween(Integer value1, Integer value2) {
            addCriterion("nDay not between", value1, value2, "nday");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table input_disease
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table input_disease
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}